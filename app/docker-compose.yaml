version: '3.7'
services:
  nginx:
    image: nginx:1.17
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    ports:
      - 8000:80
    depends_on:
      - backend
      - frontend

  redis:
    image: redis
    ports:
      - 6379:6379

  postgres:
    image: postgres:12
    restart: always
    environment:
      POSTGRES_SERVER: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_DB: full-stack-db

    ports:
      - '5432:5432'
    volumes:
      - db-data:/var/lib/postgresql/data:cached

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5050:5050"
    volumes:
      - pga4volume:/var/lib/pgadmin
    environment:
      PGADMIN_LISTEN_PORT: 5050
      PGADMIN_DEFAULT_EMAIL: admin
      PGADMIN_DEFAULT_PASSWORD: password
    depends_on:
      - 'postgres'

  worker:
    build:
      context: backend
      dockerfile: Dockerfile
    command: celery worker -A app.tasks --loglevel=DEBUG -Q main-queue -c 1

  flower:
    image: mher/flower
    command: flower --broker=redis://redis:6379/0 --port=5555
    ports:
      - 5555:5555
    depends_on:
      - "redis"

  grafana:
    image: grafana/grafana:5.0.4
    ports:
      - 3000:3000
    environment:
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - grafana-storage:/var/lib/grafana grafana/grafana
  prometheus:
    image: prom/prometheus
    ports:
      - 9091:9090
    command: --config.file=/etc/prometheus/prometheus.yaml
    volumes:
      - ./configurations/prometheus.yaml:/etc/prometheus/prometheus.yaml

  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    command: python app/main.py
    tty: true
    volumes:
      - ./backend:/app/:cached
      - ./.docker/.ipython:/root/.ipython:cached
    environment:
      PYTHONPATH: .
      DATABASE_URL: 'postgresql://postgres:root@postgres:5432/full-stack-db'

    depends_on:
      - "postgres"

  frontend:
    build:
      context: frontend
      dockerfile: Dockerfile
    stdin_open: true
    volumes:
      - './frontend:/app:cached'
      - './frontend/node_modules:/app/node_modules:cached'
    environment:
      - NODE_ENV=development

volumes:
  db-data:
  pga4volume:
  grafana-storage:


